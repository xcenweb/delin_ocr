name: Release Workflow

on:
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      body: ${{ steps.extract_version.outputs.body }}
      should_release: ${{ steps.check_tag.outputs.exists == 'false' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract latest version from CHANGELOG
        id: extract_version
        run: |
          # 读取CHANGELOG内容
          content=$(cat CHANGELOG.md)

          # 提取最新版本号（第一个##后面的内容）
          version=$(echo "$content" | grep -m 1 '^## ' | sed 's/## //')

          # 提取该版本的内容（直到下一个##或文件结束）
          body=$(echo "$content" | awk -v version="$version" '
            BEGIN { capture = 0 }
            $0 ~ "^## " version { capture = 1; next }
            capture == 1 && $0 ~ "^## " { exit }
            capture == 1 { print }
          ')

          # 输出变量供后续步骤使用
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          if git rev-parse "${{ steps.extract_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build-android:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: npm

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 9477386
        accept-android-sdk-licenses: true
        packages: "platform-tools platforms;android-34 build-tools;34.0.0 ndk;25.2.9519653 cmake;3.22.1"

    - name: Install dependencies
      run: npm ci

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          src-tauri/gen/android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Setup Android environment
      run: |
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

    - name: Build Android APK
      run: |
        cd src-tauri
        npx tauri android init
        npx tauri android build --apk

    - name: Sign APK
      run: |
        # Decode keystore
        echo "${{ vars.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > keystore.jks

        # Find and sign APK (apksigner handles alignment automatically)
        APK_PATH=$(find src-tauri/gen/android -name "*.apk" -type f | head -1)
        $ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner sign \
          --ks keystore.jks \
          --ks-pass pass:"${{ vars.ANDROID_KEYSTORE_PASSWORD }}" \
          --ks-key-alias "${{ vars.ANDROID_KEY_ALIAS }}" \
          --key-pass pass:"${{ vars.ANDROID_KEY_PASSWORD }}" \
          "$APK_PATH"

        # Clean up
        rm -f keystore.jks

    - name: Find APK files
      id: find-apk
      run: |
        APK_PATH=$(find src-tauri/gen/android -name "*.apk" -type f | head -1)
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "apk_name=$(basename $APK_PATH)" >> $GITHUB_OUTPUT

    - name: Rename APK file
      id: rename-apk
      run: |
        OLD_APK_PATH="${{ steps.find-apk.outputs.apk_path }}"
        NEW_APK_NAME="delin-${{ needs.prepare-release.outputs.version }}-release.apk"
        NEW_APK_PATH="$(dirname $OLD_APK_PATH)/$NEW_APK_NAME"
        mv "$OLD_APK_PATH" "$NEW_APK_PATH"
        echo "renamed_apk_path=$NEW_APK_PATH" >> $GITHUB_OUTPUT
        echo "renamed_apk_name=$NEW_APK_NAME" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.prepare-release.outputs.version }}
        name: ${{ needs.prepare-release.outputs.version }}
        body: ${{ needs.prepare-release.outputs.body }}
        files: ${{ steps.rename-apk.outputs.renamed_apk_path }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
